// Code generated by yc@{{.CommandLineVersion}}. DO NOT EDIT.
package db

import (
	"context"
	"github.com/juxuny/yc/dt"
	"github.com/juxuny/yc/log"
	"github.com/juxuny/yc/errors"
	"github.com/juxuny/yc/orm"

	{{.PackageAlias}} "{{.GoModuleName}}"
)

var {{.TableName}} = {{.TableName|lowerFirst}} {
{{range $field := .Fields}}	{{.FieldName|upperFirst}}: orm.FieldName("{{.OrmFieldName}}"),
{{end}}}

type {{.ModelName}} struct {
{{range $field := .Fields}}	{{.FieldName|upperFirst}} {{.ModelDataType}} `json:"{{.FieldName|lowerFirst}}" orm:"{{.OrmFieldName}}"`
{{end}}}

func ({{.ModelName}}) TableName() string {
	return cos.Name + "_" + "{{.TableNameWithoutServicePrefix}}"
}

{{$modelName := .ModelName}}
{{$packageAlias := .PackageAlias}}
{{range $ref := .Refs}}
func (t {{$modelName}}) To{{$ref.ModelName}}() {{$packageAlias}}.{{$ref.ModelName}} {
	return {{$packageAlias}}.{{$ref.ModelName}}{
	{{range $refField := $ref.Fields}}	{{$refField.FieldName|upperFirst}}: t.{{$refField.FieldName|upperFirst}},
	{{end}}}
}{{end}}

{{range $ref := .Refs}}
func (t {{$modelName}}) To{{$ref.ModelName}}AsPointer() *{{$packageAlias}}.{{$ref.ModelName}} {
	ret := t.To{{$ref.ModelName}}()
	return &ret
}{{end}}

type {{.ModelName}}List []{{.ModelName}}

func (t {{.ModelName}}List) Filter(f func(index int, item {{.ModelName}}) bool) {{.ModelName}}List {
	ret := make({{.ModelName}}List, 0)
	for i, item := range t {
		if f(i, item) {
			ret = append(ret, item)
		}
	}
	return ret
}

func (t {{.ModelName}}List) MergeSort(list {{.ModelName}}List, less func (a, b {{.ModelName}}) bool ) {{.ModelName}}List {
	ret := make({{.ModelName}}List, 0)
	i, j := 0, 0
	for i {{.Lt}} len(t) || j {{.Lt}} len(list) {
		if i {{.Lt}} len(t) && j {{.Lt}} len(list) {
			if less(t[i], list[j]) {
				ret = append(ret, t[i])
				i += 1
			} else {
				ret = append(ret, list[j])
				j += 1
			}
			continue
		} else if i {{.Lt}} len(t) {
			ret = append(ret, t[i])
			i += 1
		} else if j {{.Lt}} len(list) {
			ret = append(ret, list[j])
			j += 1
		}
	}
	return ret
}

{{range $ref := .Refs}}
func (t {{$modelName}}List) MapTo{{$ref.ModelName}}List() []*{{$packageAlias}}.{{$ref.ModelName}}  {
	ret := make([]*{{$packageAlias}}.{{$ref.ModelName}} , 0)
		for _, item := range t {
		ret = append(ret, item.To{{$ref.ModelName}}AsPointer())
	}
	return ret
}{{end}}

type {{.TableName|lowerFirst}} struct {
	suffix          []string
    checkCloneTable bool
{{range $field := .Fields}}	{{.FieldName|upperFirst}} orm.FieldName
{{end}}}

func (t {{.TableName|lowerFirst}}) EnableHashTableNameAndCheckClone(suffix ...string) {{.TableName|lowerFirst}} {
	return {{.TableName|lowerFirst}}{
	suffix:          suffix,
	checkCloneTable: true,
{{range $field := .Fields}}	{{.FieldName|upperFirst}}: t.{{.FieldName|upperFirst}},
{{end}}}
}

func (t {{.TableName|lowerFirst}}) EnableHash(suffix ...string) {{.TableName|lowerFirst}} {
	return {{.TableName|lowerFirst}}{
	suffix:          suffix,
	checkCloneTable: false,
{{range $field := .Fields}}	{{.FieldName|upperFirst}}: t.{{.FieldName|upperFirst}},
{{end}}}
}

func (t {{.TableName|lowerFirst}}) BaseTableName() orm.TableName {
	return cos.Name + "_" + "{{.TableNameWithoutServicePrefix}}"
}

func (t {{.TableName|lowerFirst}}) TableName() orm.TableName {
	ret := orm.TableName("{{.TableNameWithoutServicePrefix}}").Prefix(cos.Name)
	for _, s := range t.suffix {
		ret = ret.Suffix(s)
	}
	return ret
}

func (t {{.TableName|lowerFirst}}) checkAndCloneTable(ctx context.Context) error {
	if t.checkCloneTable {
		tableNameList, err := orm.ShowTables(ctx, cos.Name)
		if err != nil {
			log.Error(err)
		return err
	}
	if !tableNameList.Contain(t.BaseTableName()) {
		return errors.SystemError.DatabaseCloneErrorNotFoundTemplate.WithField("tableName", t.BaseTableName().String())
	}
	if !tableNameList.Contain(t.TableName()) {
		w := orm.NewCloneWrapper(t.BaseTableName(), t.TableName())
		_, err := orm.Clone(ctx, cos.Name, w)
			return err
		}
	}
	return nil
}

{{range $field := .Fields}}{{if $field.HasIndex}}
func (t {{.TableName|lowerFirst}}) FindOneBy{{$field.FieldName|upperFirst}}(ctx context.Context, {{$field.FieldName|lowerFirst}} {{$field.ModelDataType}}, orderBy ...orm.Order) (data {{$field.ModelName}}, found bool, err error) {
    err = t.checkAndCloneTable(ctx)
	if err != nil {
		return
	}
	w := orm.NewQueryWrapper(data).Limit(1).TableName(t.TableName())
	w.Eq({{$field.TableName}}.{{$field.FieldName|upperFirst}}, {{$field.FieldName|lowerFirst}}){{if $field.HasDeletedAt}}
	w.Nested(orm.NewOrWhereWrapper().Eq({{$field.TableName}}.DeletedAt, 0).IsNull({{$field.TableName}}.DeletedAt)){{end}}
	w.Order(orderBy...)
	err = orm.Select(ctx, cos.Name, w, &data)
	if err != nil {
		if e, ok := err.(errors.Error); ok && e.Code == errors.SystemError.DatabaseNoData.Code {
			return data, false, nil
		}
		log.Error(err)
		return data, false, err
	}
	return data, true, nil
}
{{end}}{{end}}

{{range $field := .Fields}}{{if $field.HasIndex}}
func ({{.TableName|lowerFirst}}) UpdateBy{{$field.FieldName|upperFirst}}(ctx context.Context, {{$field.FieldName|lowerFirst}} {{$field.ModelDataType}}, update orm.H) (rowsAffected int64, err error) {
	w := orm.NewUpdateWrapper({{.ModelName}}{})
	w.Eq({{.TableName}}.{{$field.FieldName|upperFirst}}, {{$field.FieldName|lowerFirst}}){{if .HasDeletedAt}}
	w.Nested(orm.NewOrWhereWrapper().Eq({{.TableName}}.DeletedAt, 0).IsNull({{.TableName}}.DeletedAt)){{end}}
	w.Updates(update)
	result, err := orm.Update(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}
{{end}}{{end}}

func ({{.TableName|lowerFirst}}) Update(ctx context.Context, update orm.H, where orm.WhereWrapper) (rowsAffected int64, err error) {
	w := orm.NewUpdateWrapper({{.ModelName}}{})
	w.SetWhere(where).Updates(update){{if .HasDeletedAt}}
	w.Nested(orm.NewOrWhereWrapper().Eq({{.TableName}}.DeletedAt, 0).IsNull({{.TableName}}.DeletedAt)){{end}}
	result, err := orm.Update(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}

{{range $field := .Fields}}{{if $field.HasIndex}}
func ({{.TableName|lowerFirst}}) DeleteBy{{$field.FieldName|upperFirst}}(ctx context.Context, {{$field.FieldName|lowerFirst}} {{$field.ModelDataType}}) (rowsAffected int64, err error) {
	w := orm.NewDeleteWrapper({{.ModelName}}{})
	w.Eq({{.TableName}}.{{$field.FieldName|upperFirst}}, {{$field.FieldName|lowerFirst}})
	result, err := orm.Delete(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}
{{end}}{{end}}

{{ if .HasDeletedAt}}
{{range $field := .Fields}}{{if $field.HasIndex}}
func ({{.TableName|lowerFirst}}) SoftDeleteBy{{$field.FieldName|upperFirst}}(ctx context.Context, {{$field.FieldName|lowerFirst}} {{$field.ModelDataType}}) (rowsAffected int64, err error) {
	w := orm.NewUpdateWrapper({{.ModelName}}{})
	w.SetValue({{.TableName}}.DeletedAt, orm.Now())
	w.Eq({{.TableName}}.{{$field.FieldName|upperFirst}}, {{$field.FieldName|lowerFirst}})
	result, err := orm.Update(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}
{{end}}{{end}}{{end}}

{{ if .HasDeletedAt}}
func ({{.TableName|lowerFirst}}) SoftDelete(ctx context.Context, where orm.WhereWrapper) (rowsAffected int64, err error) {
	w := orm.NewUpdateWrapper({{.ModelName}}{})
	w.SetValue({{.TableName}}.DeletedAt, orm.Now())
	w.SetWhere(where)
	result, err := orm.Update(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}
{{end}}

func ({{.TableName|lowerFirst}}) Find(ctx context.Context, where orm.WhereWrapper, orderBy ...orm.Order) (list {{.ModelName}}List, err error) {
	w := orm.NewQueryWrapper({{.ModelName}}{}){{if .HasDeletedAt}}
	w.Nested(orm.NewOrWhereWrapper().Eq({{.TableName}}.DeletedAt, 0).IsNull({{.TableName}}.DeletedAt)){{end}}
	w.Nested(where)
	w.Order(orderBy...)
	err = orm.Select(ctx, cos.Name, w, &list)
	if err != nil {
		log.Error(err)
		return nil, err
	}
	return
}

func ({{.TableName|lowerFirst}}) FindOne(ctx context.Context, where orm.WhereWrapper, orderBy ...orm.Order) (ret {{.ModelName}}, found bool, err error) {
	w := orm.NewQueryWrapper({{.ModelName}}{})
	w.SetWhere(where).Order(orderBy...){{if .HasDeletedAt}}
	w.Nested(orm.NewOrWhereWrapper().Eq({{.TableName}}.DeletedAt, 0).IsNull({{.TableName}}.DeletedAt)){{end}}
	err = orm.Select(ctx, cos.Name, w, &ret)
	if err != nil {
		if e, ok := err.(errors.Error); ok && e.Code == errors.SystemError.DatabaseNoData.Code {
			return ret, false, nil
		}
		log.Error(err)
		return ret, false, err
	}
	return ret, true, nil
}

{{range $field := .Fields}}{{if $field.HasIndex}}
func ({{.TableName|lowerFirst}}) FindBy{{.FieldName|upperFirst}}(ctx context.Context, {{$field.FieldName|lowerFirst}} {{$field.ModelDataType}}, orderBy ...orm.Order) (list {{.ModelName}}List, err error) {
	w := orm.NewQueryWrapper({{.ModelName}}{})
	w.Eq({{.TableName}}.{{.FieldName|upperFirst}}, {{.FieldName|lowerFirst}}){{if .HasDeletedAt}}
	w.Nested(orm.NewOrWhereWrapper().Eq({{.TableName}}.DeletedAt, 0).IsNull({{.TableName}}.DeletedAt)){{end}}
	w.Order(orderBy...)
	err = orm.Select(ctx, cos.Name, w, &list)
	if err != nil {
		log.Error(err)
		return nil, err
	}
	return
}
{{end}}{{end}}

func ({{.TableName|lowerFirst}}) Page(ctx context.Context, pageNum, pageSize int64, where orm.WhereWrapper, orderBy ...orm.Order) (list {{.ModelName}}List, err error) {
	w := orm.NewQueryWrapper({{.ModelName}}{})
	w.SetWhere(where).Offset((pageNum - 1) * pageSize).Limit(pageSize){{if .HasDeletedAt}}
	w.Nested(orm.NewOrWhereWrapper().Eq({{.TableName}}.DeletedAt, 0).IsNull({{.TableName}}.DeletedAt)){{end}}
	w.Order(orderBy...)
	err = orm.Select(ctx, cos.Name, w, &list)
	if err != nil {
		return nil, err
	}
	return
}

{{range $field := .Fields}}{{if $field.HasIndex}}
func ({{.TableName|lowerFirst}}) PageBy{{.FieldName|upperFirst}}(ctx context.Context, pageNum, pageSize int64, {{$field.FieldName|lowerFirst}} {{$field.ModelDataType}}, orderBy ...orm.Order) (list {{.ModelName}}List, err error) {
	w := orm.NewQueryWrapper({{.ModelName}}{})
	w.Eq({{.TableName}}.{{.FieldName|upperFirst}}, {{.FieldName|lowerFirst}}){{if .HasDeletedAt}}
	w.Nested(orm.NewOrWhereWrapper().Eq({{.TableName}}.DeletedAt, 0).IsNull({{.TableName}}.DeletedAt)){{end}}
	w.Offset((pageNum - 1) * pageSize).Limit(pageSize).Order(orderBy...)
	err = orm.Select(ctx, cos.Name, w, &list)
	if err != nil {
		log.Error(err)
		return nil, err
	}
	return
}
{{end}}{{end}}

func ({{.TableName|lowerFirst}}) Count(ctx context.Context, where orm.WhereWrapper) (count int64, err error) {
	w := orm.NewQueryWrapper({{.ModelName}}{})
	w.SetWhere(where){{if .HasDeletedAt}}
	w.Nested(orm.NewOrWhereWrapper().Eq({{.TableName}}.DeletedAt, 0).IsNull({{.TableName}}.DeletedAt)){{end}}
	w.Select("COUNT(*)")
	err = orm.Select(ctx, cos.Name, w, &count)
	if err != nil {
		log.Error(err)
	}
	return count, err
}

{{range $field := .Fields}}{{if $field.HasIndex}}
func ({{.TableName|lowerFirst}}) CountBy{{.FieldName|upperFirst}}(ctx context.Context, {{$field.FieldName|lowerFirst}} {{$field.ModelDataType}}) (count int64, err error) {
	w := orm.NewQueryWrapper({{.ModelName}}{})
	w.Eq({{.TableName}}.{{.FieldName|upperFirst}}, {{.FieldName|lowerFirst}}){{if .HasDeletedAt}}
	w.Nested(orm.NewOrWhereWrapper().Eq({{.TableName}}.DeletedAt, 0).IsNull({{.TableName}}.DeletedAt)){{end}}
	w.Select("COUNT(*)")
	err = orm.Select(ctx, cos.Name, w, &count)
	if err != nil {
		log.Error(err)
	}
	return count, err
}
{{end}}{{end}}

func ({{.TableName|lowerFirst}}) Create(ctx context.Context, data ...{{.ModelName}}) (rowsAffected int64, err error) {
	w := orm.NewInsertWrapper({{.ModelName}}{})
	for _, item := range data {
		w.Add(item)
	}
	result, err := orm.Insert(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}

func ({{.TableName|lowerFirst}}) CreateWithLastId(ctx context.Context, data {{.ModelName}}) (lastInsertId *dt.ID, err error) {
	w := orm.NewInsertWrapper({{.ModelName}}{})
	w.Add(data)
	result, err := orm.Insert(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return dt.InvalidIDPointer(), err
	}
	if id, err := result.LastInsertId(); err != nil {
		return dt.InvalidIDPointer(), err
	} else {
		return dt.NewIDPointer(uint64(id)), nil
	}
}

{{if .HasDeletedAt}}
func ({{.TableName|lowerFirst}})  ResetDeletedAt(ctx context.Context, where orm.WhereWrapper) (rowsAffected int64, err error) {
	w := orm.NewUpdateWrapper({{.ModelName}}{})
	w.SetWhere(where)
	w.SetValue(TableConfig.DeletedAt, 0)
	result, err := orm.Update(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}
{{end}}

func ({{.TableName|lowerFirst}}) UpdateAdvance(ctx context.Context, update orm.UpdateWrapper) (rowsAffected int64, err error) {
	w := update{{if .HasDeletedAt}}
	w.Nested(orm.NewOrWhereWrapper().Eq({{.TableName}}.DeletedAt, 0).IsNull({{.TableName}}.DeletedAt)){{end}}
	result, err := orm.Update(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}

func ({{.TableName|lowerFirst}}) SumInt64(ctx context.Context, field orm.FieldName, where orm.WhereWrapper) (sum int64, err error) {
	w := orm.NewQueryWrapper({{.ModelName}}{})
	w.Select("SUM(" + field.Wrap() + ")")
	w.SetWhere(where){{if .HasDeletedAt}}
	w.Nested(orm.NewOrWhereWrapper().Eq({{.TableName}}.DeletedAt, 0).IsNull({{.TableName}}.DeletedAt)){{end}}
	err = orm.Select(ctx, cos.Name, w, &sum)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return sum, err
}

func ({{.TableName|lowerFirst}}) SumFloat64(ctx context.Context, field orm.FieldName, where orm.WhereWrapper) (sum float64, err error) {
	w := orm.NewQueryWrapper({{.ModelName}}{})
	w.Select("SUM(" + field.Wrap() + ")")
	w.SetWhere(where){{if .HasDeletedAt}}
	w.Nested(orm.NewOrWhereWrapper().Eq({{.TableName}}.DeletedAt, 0).IsNull({{.TableName}}.DeletedAt)){{end}}
	err = orm.Select(ctx, cos.Name, w, &sum)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return sum, err
}
