// Code generated by yc@{{.CommandLineVersion}}. DO NOT EDIT.
using {{.CSharpBaseNamespace}}.Orm;
using SQLite;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace {{.CSharpModelNamespace}}
{
    {{if ne .Desc ""}}// {{.Desc}}
    {{end}}[Table("{{.TableNameWithoutServicePrefix|camelcase}}")]
    public class {{.ModelName}}: IModel
    {
        public static class TableDefinition {
            public static Table TableName = new Table("{{.TableNameWithoutServicePrefix|camelcase}}");
            {{range $index, $item := .Fields}}{{if ne .Desc ""}}// {{.Desc}}
            {{end}}public static Field {{$item.FieldName|upperFirst}} = new Field("{{$item.FieldName|upperFirst}}");
            {{end}}
        }

        public static readonly List{{.Lt}}Field{{.Gt}} FieldList = new List{{.Lt}}Field{{.Gt}}()
        {
            {{range $index, $item := .Fields}}{{if ne .Desc ""}}// {{.Desc}}
            {{end}}TableDefinition.{{$item.FieldName|upperFirst}},
            {{end}}
        };

        public Table GetTableName() {
            return TableDefinition.TableName;
        }

        public IModel CloneIModel()
        {
            return new {{.ModelName}}()
            {
                {{range $index, $item := .Fields}}{{$item.FieldName|upperFirst}} = {{$item.FieldName|upperFirst}},
                {{end}}
            };
        }

        public {{.ModelName}} Clone()
        {
            return new {{.ModelName}}()
            {
                {{range $index, $item := .Fields}}{{$item.FieldName|upperFirst}} = {{$item.FieldName|upperFirst}},
                {{end}}
            };
        }

        public {{.ModelName}}() { }

        public List{{.Lt}}Field{{.Gt}} GetFieldList()
        {
            return FieldList;
        }

        public Dictionary{{.Lt}}Field, object{{.Gt}} ToDictionary()
        {
            return new Dictionary{{.Lt}}Field, object{{.Gt}}()
            {
                {{range $index, $item := .Fields}}{ TableDefinition.{{$item.FieldName|upperFirst}}, {{$item.FieldName|upperFirst}} },
                {{end}}
            };
        }

        {{range $index, $item := .Fields}}{{if $item.HasIndex}}[Indexed("{{$item.FieldName|upperFirst}}", {{$index|inc}})]
        {{end}}{{if $item.HasUnique}}[Unique]
        {{end}}{{if $item.HasPrimaryKey}}[PrimaryKey]
        {{end}}{{if $item.HasAutoIncrement}}[AutoIncrement]
        {{end}}public {{.CSharpDataType}} {{$item.FieldName|upperFirst}} { get; set; }
        {{end}}
        public static IQueryWrapper CreateQuery()
        {
            IQueryWrapper w = new QueryWrapper();
            w.TableName(TableDefinition.TableName);
            return w;
        }

        public static IUpdateWrapper CreateUpdate()
        {
            IUpdateWrapper w = new UpdateWrapper();
            w.TableName(TableDefinition.TableName);
            return w;
        }

        public static IDeleteWrapper CreateDelete()
        {
            IDeleteWrapper w = new DeleteWrapper();
            w.TableName(TableDefinition.TableName);
            return w;
        }

        public static IInsertWrapper CreateInsert()
        {
            return new InsertWrapper();
        }

        public static int Insert(params {{.ModelName}}[] args)
        {
            IInsertWrapper w = CreateInsert();
            foreach ({{.ModelName}} item in args) w.Add(item);
            return DatabaseHelper.Insert(w);
        }

        public static List{{.Lt}}{{.ModelName}}{{.Gt}} FindAdvanced(IWhereWrapper where, params OrderWrapper[] orders)
        {
            IQueryWrapper w = CreateQuery();
            w.SelectAll().Order(orders).SetWhere(where){{if .HasDeletedAt}}.Nested(WhereWrapper.Or().Eq(TableDefinition.DeletedAt, 0).IsNull(TableDefinition.DeletedAt)){{end}};
            return DatabaseHelper.Query{{.Lt}}{{.ModelName}}{{.Gt}}(w);
        }

        public static List{{.Lt}}{{.ModelName}}{{.Gt}} FindAdvanced(IWhereWrapper where, int skip, int length, params OrderWrapper[] orders)
        {
            IQueryWrapper w = CreateQuery();
            w.SelectAll().SetOffset(skip, length).Order(orders).SetWhere(where){{if .HasDeletedAt}}.Nested(WhereWrapper.Or().Eq(TableDefinition.DeletedAt, 0).IsNull(TableDefinition.DeletedAt)){{end}};
            return DatabaseHelper.Query{{.Lt}}{{.ModelName}}{{.Gt}}(w);
        }

        public static int UpdateAdvanced(IWhereWrapper where, Dictionary{{.Lt}}Field, object{{.Gt}} update)
        {
            IUpdateWrapper w = CreateUpdate();
            w.SetWhere(where){{if .HasDeletedAt}}.Nested(WhereWrapper.Or().Eq(TableDefinition.DeletedAt, 0).IsNull(TableDefinition.DeletedAt)){{end}};
            foreach (KeyValuePair{{.Lt}}Field, object{{.Gt}} entry in update)
            {
                w.SetValue(entry.Key, entry.Value);
            }
            return DatabaseHelper.Update(w);
        }

        public static int DeleteAdvanced(IWhereWrapper where)
        {
            IDeleteWrapper w = CreateDelete();
            w.SetWhere(where);
            return DatabaseHelper.Delete(w);
        }

        public static int CountAdvanced(IWhereWrapper where)
        {
            IQueryWrapper w = CreateQuery();
            w.SetWhere(where).Select(new Field("COUNT(*) AS Total")){{if .HasDeletedAt}}.Nested(WhereWrapper.Or().Eq(TableDefinition.DeletedAt, 0).IsNull(TableDefinition.DeletedAt)){{end}};
            return DatabaseHelper.Count(w);
        }

        public static {{.ModelName}} FindOneAdvanced(IWhereWrapper where, params OrderWrapper[] orders)
        {
            IQueryWrapper w = CreateQuery();
            w.SelectAll().SetWhere(where).Order(orders).SetLimit(1){{if .HasDeletedAt}}.Nested(WhereWrapper.Or().Eq(TableDefinition.DeletedAt, 0).IsNull(TableDefinition.DeletedAt)){{end}};
            List{{.Lt}}{{.ModelName}}{{.Gt}} list = DatabaseHelper.Query{{.Lt}}{{.ModelName}}{{.Gt}}(w);
            if (list != null && list.Count() {{.Gt}} 0)
            {
                return list[0];
            }
            return null;
        }

        public static {{.ModelName}} FindDeletedOneAdvanced(IWhereWrapper where, params OrderWrapper[] orders)
        {
            IQueryWrapper w = CreateQuery();
            w.SelectAll().SetWhere(where).Order(orders).SetLimit(1){{if .HasDeletedAt}}.Gt(TableDefinition.DeletedAt, 0){{end}};
            List{{.Lt}}{{.ModelName}}{{.Gt}} list = DatabaseHelper.Query{{.Lt}}{{.ModelName}}{{.Gt}}(w);
            if (list != null && list.Count() {{.Gt}} 0)
            {
                return list[0];
            }
            return null;
        }

        public static {{.ModelName}} FindWithDeletedOneAdvanced(IWhereWrapper where, params OrderWrapper[] orders)
        {
            IQueryWrapper w = CreateQuery();
            w.SelectAll().SetWhere(where).Order(orders).SetLimit(1);
            List{{.Lt}}{{.ModelName}}{{.Gt}} list = DatabaseHelper.Query{{.Lt}}{{.ModelName}}{{.Gt}}(w);
            if (list != null && list.Count() {{.Gt}} 0)
            {
                return list[0];
            }
            return null;
        }

        public static List{{.Lt}}{{.ModelName}}{{.Gt}} PageAdvanced(IWhereWrapper where, int page, int pageSize, params OrderWrapper[] orders)
        {
            IQueryWrapper w = CreateQuery();
            w.SelectAll().Page(page, pageSize).SetWhere(where).Order(orders){{if .HasDeletedAt}}.Nested(WhereWrapper.Or().Eq(TableDefinition.DeletedAt, 0).IsNull(TableDefinition.DeletedAt)){{end}};
            return DatabaseHelper.Query{{.Lt}}{{.ModelName}}{{.Gt}}(w);
        }{{if .HasDeletedAt}}

        public static int SoftDeleteAdvanced(IWhereWrapper where)
        {
            IUpdateWrapper w = CreateUpdate();
            w.SetWhere(where).SetValue(TableDefinition.DeletedAt, TimeUtils.GetTimestampInMillionSeconds());
            return DatabaseHelper.Update(w);
        }{{end}}

        {{range $item := .Fields}}{{if $item.HasIndex}}public static int UpdateBy{{$item.FieldName|camelcase|upperFirst}}({{.CSharpDataType}} {{$item.FieldName|camelcase|lowerFirst}}, Dictionary{{.Lt}}Field, object{{.Gt}} update)
        {
            IUpdateWrapper w = CreateUpdate();
            foreach (KeyValuePair{{.Lt}}Field, object{{.Gt}} entry in update)
            {
                w.SetValue(entry.Key, entry.Value);
            }
            w.Eq(TableDefinition.{{$item.FieldName|camelcase|upperFirst}}, {{$item.FieldName|camelcase|lowerFirst}}){{if $item.HasDeletedAt}}.Nested(WhereWrapper.Or().Eq(TableDefinition.DeletedAt, 0).IsNull(TableDefinition.DeletedAt)){{end}};
            return DatabaseHelper.Update(w);
        }

        public static int UpdateAndResetSoftDeletedBy{{$item.FieldName|camelcase|upperFirst}}({{.CSharpDataType}} {{$item.FieldName|camelcase|lowerFirst}}, Dictionary{{.Lt}}Field, object{{.Gt}} update)
        {
            IUpdateWrapper w = CreateUpdate();
            foreach (KeyValuePair{{.Lt}}Field, object{{.Gt}} entry in update)
            {
                w.SetValue(entry.Key, entry.Value);
            }{{if $item.HasDeletedAt}}
            w.SetValue(TableDefinition.DeletedAt, 0);{{end}}
            w.Eq(TableDefinition.{{$item.FieldName|camelcase|upperFirst}}, {{$item.FieldName|camelcase|lowerFirst}}){{if $item.HasDeletedAt}}.Gt(TableDefinition.DeletedAt, 0){{end}};
            return DatabaseHelper.Update(w);
        }

        public static int DeleteBy{{$item.FieldName|camelcase|upperFirst}}({{.CSharpDataType}} {{$item.FieldName|camelcase|lowerFirst}})
        {
            IDeleteWrapper w = CreateDelete();
            w.Eq(TableDefinition.{{$item.FieldName|camelcase|upperFirst}}, {{$item.FieldName|camelcase|lowerFirst}}){{if $item.HasDeletedAt}}.Nested(WhereWrapper.Or().Eq(TableDefinition.DeletedAt, 0).IsNull(TableDefinition.DeletedAt)){{end}};
            return DatabaseHelper.Delete(w);
        }

        public static List{{.Lt}}{{.ModelName}}{{.Gt}} FindBy{{$item.FieldName|camelcase|upperFirst}}({{.CSharpDataType}} {{$item.FieldName|camelcase|lowerFirst}}, params OrderWrapper[] orders)
        {
            IQueryWrapper w = CreateQuery();
            w.SelectAll().Order(orders).Eq(TableDefinition.{{$item.FieldName|camelcase|upperFirst}}, {{$item.FieldName|camelcase|lowerFirst}}){{if $item.HasDeletedAt}}.Nested(WhereWrapper.Or().Eq(TableDefinition.DeletedAt, 0).IsNull(TableDefinition.DeletedAt)){{end}};
            return DatabaseHelper.Query{{.Lt}}{{.ModelName}}{{.Gt}}(w);
        }

        public static {{.ModelName}} FindOneBy{{$item.FieldName|camelcase|upperFirst}}({{.CSharpDataType}} {{$item.FieldName|camelcase|lowerFirst}}, params OrderWrapper[] orders)
        {
            IQueryWrapper w = CreateQuery();
            w.SelectAll().Order(orders).Eq(TableDefinition.{{$item.FieldName|camelcase|upperFirst}}, {{$item.FieldName|camelcase|lowerFirst}}).SetLimit(1){{if $item.HasDeletedAt}}.Nested(WhereWrapper.Or().Eq(TableDefinition.DeletedAt, 0).IsNull(TableDefinition.DeletedAt)){{end}};
            List{{.Lt}}{{.ModelName}}{{.Gt}} list = DatabaseHelper.Query{{.Lt}}{{.ModelName}}{{.Gt}}(w);
            if (list != null && list.Count() {{.Gt}} 0)
            {
                return list[0];
            }
            return null;
        }

        public static {{.ModelName}} FindDeletedOneBy{{$item.FieldName|camelcase|upperFirst}}({{.CSharpDataType}} {{$item.FieldName|camelcase|lowerFirst}}, params OrderWrapper[] orders)
        {
            IQueryWrapper w = CreateQuery();
            w.SelectAll().Order(orders).Eq(TableDefinition.{{$item.FieldName|camelcase|upperFirst}}, {{$item.FieldName|camelcase|lowerFirst}}).SetLimit(1){{if $item.HasDeletedAt}}.Gt(TableDefinition.DeletedAt, 0){{end}};
            List{{.Lt}}{{.ModelName}}{{.Gt}} list = DatabaseHelper.Query{{.Lt}}{{.ModelName}}{{.Gt}}(w);
            if (list != null && list.Count() {{.Gt}} 0)
            {
                return list[0];
            }
            return null;
        }

        public static {{.ModelName}} FindWithDeletedOneBy{{$item.FieldName|camelcase|upperFirst}}({{.CSharpDataType}} {{$item.FieldName|camelcase|lowerFirst}}, params OrderWrapper[] orders)
        {
            IQueryWrapper w = CreateQuery();
            w.SelectAll().Order(orders).Eq(TableDefinition.{{$item.FieldName|camelcase|upperFirst}}, {{$item.FieldName|camelcase|lowerFirst}}).SetLimit(1);
            List{{.Lt}}{{.ModelName}}{{.Gt}} list = DatabaseHelper.Query{{.Lt}}{{.ModelName}}{{.Gt}}(w);
            if (list != null && list.Count() {{.Gt}} 0)
            {
                return list[0];
            }
            return null;
        }

        public static int SoftDeleteBy{{$item.FieldName|camelcase|upperFirst}}({{.CSharpDataType}} {{$item.FieldName|camelcase|lowerFirst}})
        {
            return UpdateBy{{$item.FieldName|camelcase|upperFirst}}({{$item.FieldName|camelcase|lowerFirst}}, new Dictionary{{.Lt}}Field, object{{.Gt}}() {
                {TableDefinition.DeletedAt, TimeUtils.GetTimestampInMillionSeconds() }
            });
        }

        {{if $item.HasDeletedAt}}public static int ResetSoftDeletedBy{{$item.FieldName|camelcase|upperFirst}}({{.CSharpDataType}} {{$item.FieldName|camelcase|lowerFirst}})
        {
            IUpdateWrapper w = CreateUpdate();
            w.SetValue(TableDefinition.DeletedAt, 0);
            w.Eq(TableDefinition.{{$item.FieldName|camelcase|upperFirst}}, {{$item.FieldName|camelcase|lowerFirst}}){{if $item.HasDeletedAt}}.Gt(TableDefinition.DeletedAt, 0){{end}};
            return DatabaseHelper.Update(w);
        }{{end}}

        public static List{{.Lt}}{{.ModelName}}{{.Gt}} PageBy{{$item.FieldName|camelcase|upperFirst}}({{.CSharpDataType}} {{$item.FieldName|camelcase|lowerFirst}}, int page, int pageSize, params OrderWrapper[] orders)
        {
            IQueryWrapper w = CreateQuery();
            w.Eq(TableDefinition.{{$item.FieldName|camelcase|upperFirst}}, {{$item.FieldName|camelcase|lowerFirst}}).Order(orders).Page(page, pageSize){{if $item.HasDeletedAt}}.Nested(WhereWrapper.Or().Eq(TableDefinition.DeletedAt, 0).IsNull(TableDefinition.DeletedAt)){{end}};
            return DatabaseHelper.Query{{.Lt}}{{.ModelName}}{{.Gt}}(w);
        }

        public static int CountBy{{$item.FieldName|camelcase|upperFirst}}({{.CSharpDataType}} {{$item.FieldName|camelcase|lowerFirst}})
        {
            IQueryWrapper w = CreateQuery();
            w.Eq(TableDefinition.{{$item.FieldName|camelcase|upperFirst}}, {{$item.FieldName|camelcase|lowerFirst}}).Select(new Field("COUNT(*) AS Total"));
            return DatabaseHelper.Count(w);
        }

        public static List{{.Lt}}{{.CSharpDataType}}{{.Gt}} Pick{{$item.FieldName|camelcase|upperFirst}}(List{{.Lt}}{{.ModelName}}{{.Gt}} list)
        {
            List{{.Lt}}{{.CSharpDataType}}{{.Gt}} result = new List{{.Lt}}{{.CSharpDataType}}{{.Gt}}();
            foreach ({{.ModelName}} item in list)
            {
                result.Add(item.{{$item.FieldName|camelcase|upperFirst}});
            }
            return result;
        }

        public static IDictionary{{.Lt}}{{.CSharpDataType}}, List{{.Lt}}{{.ModelName}}{{.Gt}}{{.Gt}} GroupBy{{$item.FieldName|camelcase|upperFirst}}(List{{.Lt}}{{.ModelName}}{{.Gt}} list)
        {
            IDictionary{{.Lt}}{{.CSharpDataType}}, List{{.Lt}}{{.ModelName}}{{.Gt}}{{.Gt}} result = new Dictionary{{.Lt}}{{.CSharpDataType}}, List{{.Lt}}{{.ModelName}}{{.Gt}}{{.Gt}}();
            foreach ({{.ModelName}} item in list)
            {
                List{{.Lt}}{{.ModelName}}{{.Gt}} items = null;
                if (result.ContainsKey(item.{{$item.FieldName|camelcase|upperFirst}}))
                {
                    items = result[item.{{$item.FieldName|camelcase|upperFirst}}];
                    items.Add(item);
                }
                else
                {
                    items = new List{{.Lt}}{{.ModelName}}{{.Gt}}
                    {
                        item
                    };
                    result[item.{{$item.FieldName|camelcase|upperFirst}}] = items;
                }
            }
            return result;
        }

        {{end}}{{end}}
    }
}
