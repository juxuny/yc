// Code generated by yc@{{.CommandLineVersion}}. DO NOT EDIT.
package http

import (
	"context"
	"fmt"
	"github.com/juxuny/yc/log"
	"github.com/juxuny/yc/router"
	{{.PackageAlias}} "{{.GoModuleName}}"
	"{{.ServiceModuleName}}/config"
	"{{.ServiceModuleName}}/handler"
	"github.com/juxuny/yc/trace"
	"path"
	"strings"
)
{{$packageAlias := .PackageAlias}}
func init() {
	{{range $item := .IgnoreAuthList}}router.AddIgnoreAuthPath(config.Env.Prefix + "/" + path.Join({{$packageAlias}}.ApiGroupName, "{{$item}}"))
{{end}}	{{range $item := .OpenApiList}}router.AddOpenApiPath(config.Env.Prefix + "/" + path.Join({{$packageAlias}}.ApiGroupName, "{{$item}}"))
{{end}}}

func Start(ctx context.Context) {
	trace.InitReqId("http")
	router.SetPrefix(config.Env.Prefix)
	if err := router.Register(strings.ReplaceAll({{.PackageAlias}}.Name, "_", "-"), handler.NewHandler()); err != nil {
		panic(err)
	}
	finished := make(chan bool, 1)
	go func() {
		if err := router.Start(fmt.Sprintf(":%d", config.Env.HttpPort)); err != nil {
			panic(err)
		}
		finished {{.Lt}}- true
	}()
	select {
	case {{.Lt}}-ctx.Done():
		log.Info("canceled")
		return
	case {{.Lt}}-finished:
		log.Info("http server finished")
	}
}
