// Code generated by yc. DO NOT EDIT.
package {{.PackageName}}

import (
	"context"
	"fmt"
	"github.com/juxuny/yc"
	"github.com/juxuny/yc/errors"
	"google.golang.org/grpc/metadata"
	"net/http"
)

type Client interface {
{{range $item := .Methods}}	{{$item.MethodName}}(ctx context.Context, req *{{$item.Request}}, extensionMetadata ...metadata.MD) (resp *{{$item.Response}}, err error)
{{end}}
}

type client struct {
	Service      string
	EntrypointDispatcher yc.EntrypointDispatcher
}

var DefaultClient Client


func NewClientWithDispatcher(entrypointDispatcher yc.EntrypointDispatcher) Client {
	return &client{
		Service: Name,
		EntrypointDispatcher: entrypointDispatcher,
	}
}
{{range $item := .Methods}}
func (t *client) {{$item.MethodName}}(ctx context.Context, req *{{$item.Request}}, extensionMetadata ...metadata.MD) (resp *{{$item.Response}}, err error) {
	md := yc.GetHeader(ctx, extensionMetadata...)
	ctx = metadata.NewOutgoingContext(ctx, md)
	resp = &{{$item.Response}}{}
	var code int
	code, err = yc.RpcCall(ctx, t.EntrypointDispatcher.SelectOne(), "/api/"+t.Service+"/health", req, resp, md)
	if err != nil {
		return resp, err
	}
	if code != http.StatusOK {
		return resp, errors.SystemError.HttpError.Wrap(fmt.Errorf("http status = %v", code))
	}
	return
}
{{end}}
