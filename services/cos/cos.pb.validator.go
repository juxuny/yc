// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
package cos

import (
	"github.com/juxuny/yc/validator"
)

const (
	ValidatorTemplateLoginRequestAccountType            = "无效登录类型: {{.AccountType|num}}"
	ValidatorTemplateUpdateInfoRequestNick              = "missing nick name"
	ValidatorTemplateModifyPasswordRequestOldPassword   = "invalid old password: {{.OldPassword}}"
	ValidatorTemplateModifyPasswordRequestNewPassword   = "invalid new password: {{.NewPassword}}"
	ValidatorTemplateSaveOrCreateUserRequestAccountType = "invalid accountType: {{.AccountType|num}}"
	ValidatorTemplateSaveNamespaceRequestNamespace      = "invalid namespace: {{.Namespace}}"
	ValidatorTemplateDeleteNamespaceRequestId           = "invalid id"
)

var templateList = []string{
	ValidatorTemplateLoginRequestAccountType,
	ValidatorTemplateUpdateInfoRequestNick,
	ValidatorTemplateModifyPasswordRequestOldPassword,
	ValidatorTemplateModifyPasswordRequestNewPassword,
	ValidatorTemplateSaveOrCreateUserRequestAccountType,
	ValidatorTemplateSaveNamespaceRequestNamespace,
	ValidatorTemplateDeleteNamespaceRequestId,
}

func init() {
	if err := validator.RegisterTemplate(templateList...); err != nil {
		panic(err)
	}
}

func (m *HealthRequest) Validate() error {
	return nil
}
func (m *LoginRequest) Validate() error {
	if err := validator.Run(m.AccountType, validator.CreateAction("in", `1`, ValidatorTemplateLoginRequestAccountType), m, "accountType"); err != nil {
		return err
	}
	return nil
}
func (m *UserInfoRequest) Validate() error {
	return nil
}
func (m *UpdateInfoRequest) Validate() error {
	if err := validator.Run(m.Nick, validator.CreateAction("length.min", `1`, ValidatorTemplateUpdateInfoRequestNick), m, "nick"); err != nil {
		return err
	}
	return nil
}
func (m *ModifyPasswordRequest) Validate() error {
	if err := validator.Run(m.OldPassword, validator.CreateAction("length.min", `6`, ValidatorTemplateModifyPasswordRequestOldPassword), m, "oldPassword"); err != nil {
		return err
	}
	if err := validator.Run(m.OldPassword, validator.CreateAction("length.max", `22`, ValidatorTemplateModifyPasswordRequestOldPassword), m, "oldPassword"); err != nil {
		return err
	}
	if err := validator.Run(m.OldPassword, validator.CreateAction("password", `up|low|num`, ValidatorTemplateModifyPasswordRequestOldPassword), m, "oldPassword"); err != nil {
		return err
	}
	if err := validator.Run(m.NewPassword, validator.CreateAction("length.min", `6`, ValidatorTemplateModifyPasswordRequestNewPassword), m, "newPassword"); err != nil {
		return err
	}
	if err := validator.Run(m.NewPassword, validator.CreateAction("length.max", `22`, ValidatorTemplateModifyPasswordRequestNewPassword), m, "newPassword"); err != nil {
		return err
	}
	if err := validator.Run(m.NewPassword, validator.CreateAction("password", `up|low|num`, ValidatorTemplateModifyPasswordRequestNewPassword), m, "newPassword"); err != nil {
		return err
	}
	return nil
}
func (m *SaveOrCreateUserRequest) Validate() error {
	if err := validator.Run(m.AccountType, validator.CreateAction("in", `1`, ValidatorTemplateSaveOrCreateUserRequestAccountType), m, "accountType"); err != nil {
		return err
	}
	return nil
}
func (m *SaveNamespaceRequest) Validate() error {
	if err := validator.Run(m.Namespace, validator.CreateAction("length.min", `3`, ValidatorTemplateSaveNamespaceRequestNamespace), m, "namespace"); err != nil {
		return err
	}
	return nil
}
func (m *ListNamespaceRequest) Validate() error {
	return nil
}
func (m *DeleteNamespaceRequest) Validate() error {
	if err := validator.Run(m.Id, validator.CreateAction("min", `1`, ValidatorTemplateDeleteNamespaceRequestId), m, "id"); err != nil {
		return err
	}
	return nil
}
func (m *SaveConfigRequest) Validate() error {
	return nil
}
func (m *DeleteConfigRequest) Validate() error {
	return nil
}
func (m *ListConfigRequest) Validate() error {
	return nil
}
