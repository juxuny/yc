// Code generated by yc. DO NOT EDIT.
package db

import (
	"context"
	"github.com/juxuny/yc/dt"
	"github.com/juxuny/yc/errors"
	"github.com/juxuny/yc/log"
	"github.com/juxuny/yc/orm"

	cos "github.com/juxuny/yc/services/cos"
)

var TableConfig = tableConfig{
	Id:             orm.FieldName("id"),
	CreateTime:     orm.FieldName("create_time"),
	UpdateTime:     orm.FieldName("update_time"),
	DeletedAt:      orm.FieldName("deleted_at"),
	ConfigId:       orm.FieldName("config_id"),
	IsDisabled:     orm.FieldName("is_disabled"),
	CreatorId:      orm.FieldName("creator_id"),
	BaseId:         orm.FieldName("base_id"),
	NamespaceId:    orm.FieldName("namespace_id"),
	LastSeqNo:      orm.FieldName("last_seq_no"),
	LastRecordType: orm.FieldName("last_record_type"),
	LinkCount:      orm.FieldName("link_count"),
}

type ModelConfig struct {
	Id             *dt.ID               `json:"id" orm:"id"`
	CreateTime     int64                `json:"createTime" orm:"create_time"`
	UpdateTime     int64                `json:"updateTime" orm:"update_time"`
	DeletedAt      int64                `json:"deletedAt" orm:"deleted_at"`
	ConfigId       string               `json:"configId" orm:"config_id"`
	IsDisabled     bool                 `json:"isDisabled" orm:"is_disabled"`
	CreatorId      *dt.ID               `json:"creatorId" orm:"creator_id"`
	BaseId         *dt.ID               `json:"baseId" orm:"base_id"`
	NamespaceId    *dt.ID               `json:"namespaceId" orm:"namespace_id"`
	LastSeqNo      uint64               `json:"lastSeqNo" orm:"last_seq_no"`
	LastRecordType cos.ConfigRecordType `json:"lastRecordType" orm:"last_record_type"`
	LinkCount      uint64               `json:"linkCount" orm:"link_count"`
}

func (ModelConfig) TableName() string {
	return cos.Name + "_" + "config"
}

func (t ModelConfig) ToListConfigItem() cos.ListConfigItem {
	return cos.ListConfigItem{
		Id:          t.Id,
		CreateTime:  t.CreateTime,
		UpdateTime:  t.UpdateTime,
		BaseId:      t.BaseId,
		NamespaceId: t.NamespaceId,
		ConfigId:    t.ConfigId,
		LinkCount:   t.LinkCount,
		IsDisabled:  t.IsDisabled,
	}
}

func (t ModelConfig) ToListConfigItemAsPointer() *cos.ListConfigItem {
	ret := t.ToListConfigItem()
	return &ret
}

type ModelConfigList []ModelConfig

func (t ModelConfigList) Filter(f func(index int, item ModelConfig) bool) ModelConfigList {
	ret := make(ModelConfigList, 0)
	for i, item := range t {
		if f(i, item) {
			ret = append(ret, item)
		}
	}
	return ret
}

func (t ModelConfigList) MergeSort(list ModelConfigList, less func(a, b ModelConfig) bool) ModelConfigList {
	ret := make(ModelConfigList, 0)
	i, j := 0, 0
	for i < len(t) || j < len(list) {
		if i < len(t) && j < len(list) {
			if less(t[i], list[j]) {
				ret = append(ret, t[i])
				i += 1
			} else {
				ret = append(ret, list[j])
				j += 1
			}
			continue
		} else if i < len(t) {
			ret = append(ret, t[i])
			i += 1
		} else if j < len(list) {
			ret = append(ret, list[j])
			j += 1
		}
	}
	return ret
}

func (t ModelConfigList) MapToListConfigItemList() []*cos.ListConfigItem {
	ret := make([]*cos.ListConfigItem, 0)
	for _, item := range t {
		ret = append(ret, item.ToListConfigItemAsPointer())
	}
	return ret
}

type tableConfig struct {
	suffix          []string
	checkCloneTable bool
	Id              orm.FieldName
	CreateTime      orm.FieldName
	UpdateTime      orm.FieldName
	DeletedAt       orm.FieldName
	ConfigId        orm.FieldName
	IsDisabled      orm.FieldName
	CreatorId       orm.FieldName
	BaseId          orm.FieldName
	NamespaceId     orm.FieldName
	LastSeqNo       orm.FieldName
	LastRecordType  orm.FieldName
	LinkCount       orm.FieldName
}

func (t tableConfig) EnableHashTableNameAndCheckClone(suffix ...string) tableConfig {
	return tableConfig{
		suffix:          suffix,
		checkCloneTable: true,
		Id:              t.Id,
		CreateTime:      t.CreateTime,
		UpdateTime:      t.UpdateTime,
		DeletedAt:       t.DeletedAt,
		ConfigId:        t.ConfigId,
		IsDisabled:      t.IsDisabled,
		CreatorId:       t.CreatorId,
		BaseId:          t.BaseId,
		NamespaceId:     t.NamespaceId,
		LastSeqNo:       t.LastSeqNo,
		LastRecordType:  t.LastRecordType,
		LinkCount:       t.LinkCount,
	}
}

func (t tableConfig) EnableHash(suffix ...string) tableConfig {
	return tableConfig{
		suffix:          suffix,
		checkCloneTable: false,
		Id:              t.Id,
		CreateTime:      t.CreateTime,
		UpdateTime:      t.UpdateTime,
		DeletedAt:       t.DeletedAt,
		ConfigId:        t.ConfigId,
		IsDisabled:      t.IsDisabled,
		CreatorId:       t.CreatorId,
		BaseId:          t.BaseId,
		NamespaceId:     t.NamespaceId,
		LastSeqNo:       t.LastSeqNo,
		LastRecordType:  t.LastRecordType,
		LinkCount:       t.LinkCount,
	}
}

func (t tableConfig) BaseTableName() orm.TableName {
	return cos.Name + "_" + "config"
}

func (t tableConfig) TableName() orm.TableName {
	ret := orm.TableName("config").Prefix(cos.Name)
	for _, s := range t.suffix {
		ret = ret.Suffix(s)
	}
	return ret
}

func (t tableConfig) checkAndCloneTable(ctx context.Context) error {
	if t.checkCloneTable {
		tableNameList, err := orm.ShowTables(ctx, cos.Name)
		if err != nil {
			log.Error(err)
			return err
		}
		if !tableNameList.Contain(t.BaseTableName()) {
			return errors.SystemError.DatabaseCloneErrorNotFoundTemplate.WithField("tableName", t.BaseTableName().String())
		}
		if !tableNameList.Contain(t.TableName()) {
			w := orm.NewCloneWrapper(t.BaseTableName(), t.TableName())
			_, err := orm.Clone(ctx, cos.Name, w)
			return err
		}
	}
	return nil
}

func (t tableConfig) FindOneById(ctx context.Context, id *dt.ID, orderBy ...orm.Order) (data ModelConfig, found bool, err error) {
	err = t.checkAndCloneTable(ctx)
	if err != nil {
		return
	}
	w := orm.NewQueryWrapper(data).Limit(1).TableName(t.TableName())
	w.Eq(TableConfig.Id, id)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Order(orderBy...)
	err = orm.Select(ctx, cos.Name, w, &data)
	if err != nil {
		if e, ok := err.(errors.Error); ok && e.Code == errors.SystemError.DatabaseNoData.Code {
			return data, false, nil
		}
		log.Error(err)
		return data, false, err
	}
	return data, true, nil
}

func (t tableConfig) FindOneByConfigId(ctx context.Context, configId string, orderBy ...orm.Order) (data ModelConfig, found bool, err error) {
	err = t.checkAndCloneTable(ctx)
	if err != nil {
		return
	}
	w := orm.NewQueryWrapper(data).Limit(1).TableName(t.TableName())
	w.Eq(TableConfig.ConfigId, configId)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Order(orderBy...)
	err = orm.Select(ctx, cos.Name, w, &data)
	if err != nil {
		if e, ok := err.(errors.Error); ok && e.Code == errors.SystemError.DatabaseNoData.Code {
			return data, false, nil
		}
		log.Error(err)
		return data, false, err
	}
	return data, true, nil
}

func (t tableConfig) FindOneByCreatorId(ctx context.Context, creatorId *dt.ID, orderBy ...orm.Order) (data ModelConfig, found bool, err error) {
	err = t.checkAndCloneTable(ctx)
	if err != nil {
		return
	}
	w := orm.NewQueryWrapper(data).Limit(1).TableName(t.TableName())
	w.Eq(TableConfig.CreatorId, creatorId)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Order(orderBy...)
	err = orm.Select(ctx, cos.Name, w, &data)
	if err != nil {
		if e, ok := err.(errors.Error); ok && e.Code == errors.SystemError.DatabaseNoData.Code {
			return data, false, nil
		}
		log.Error(err)
		return data, false, err
	}
	return data, true, nil
}

func (t tableConfig) FindOneByBaseId(ctx context.Context, baseId *dt.ID, orderBy ...orm.Order) (data ModelConfig, found bool, err error) {
	err = t.checkAndCloneTable(ctx)
	if err != nil {
		return
	}
	w := orm.NewQueryWrapper(data).Limit(1).TableName(t.TableName())
	w.Eq(TableConfig.BaseId, baseId)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Order(orderBy...)
	err = orm.Select(ctx, cos.Name, w, &data)
	if err != nil {
		if e, ok := err.(errors.Error); ok && e.Code == errors.SystemError.DatabaseNoData.Code {
			return data, false, nil
		}
		log.Error(err)
		return data, false, err
	}
	return data, true, nil
}

func (t tableConfig) FindOneByNamespaceId(ctx context.Context, namespaceId *dt.ID, orderBy ...orm.Order) (data ModelConfig, found bool, err error) {
	err = t.checkAndCloneTable(ctx)
	if err != nil {
		return
	}
	w := orm.NewQueryWrapper(data).Limit(1).TableName(t.TableName())
	w.Eq(TableConfig.NamespaceId, namespaceId)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Order(orderBy...)
	err = orm.Select(ctx, cos.Name, w, &data)
	if err != nil {
		if e, ok := err.(errors.Error); ok && e.Code == errors.SystemError.DatabaseNoData.Code {
			return data, false, nil
		}
		log.Error(err)
		return data, false, err
	}
	return data, true, nil
}

func (tableConfig) UpdateById(ctx context.Context, id *dt.ID, update orm.H) (rowsAffected int64, err error) {
	w := orm.NewUpdateWrapper(ModelConfig{})
	w.Eq(TableConfig.Id, id)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Updates(update)
	result, err := orm.Update(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}

func (tableConfig) UpdateByConfigId(ctx context.Context, configId string, update orm.H) (rowsAffected int64, err error) {
	w := orm.NewUpdateWrapper(ModelConfig{})
	w.Eq(TableConfig.ConfigId, configId)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Updates(update)
	result, err := orm.Update(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}

func (tableConfig) UpdateByCreatorId(ctx context.Context, creatorId *dt.ID, update orm.H) (rowsAffected int64, err error) {
	w := orm.NewUpdateWrapper(ModelConfig{})
	w.Eq(TableConfig.CreatorId, creatorId)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Updates(update)
	result, err := orm.Update(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}

func (tableConfig) UpdateByBaseId(ctx context.Context, baseId *dt.ID, update orm.H) (rowsAffected int64, err error) {
	w := orm.NewUpdateWrapper(ModelConfig{})
	w.Eq(TableConfig.BaseId, baseId)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Updates(update)
	result, err := orm.Update(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}

func (tableConfig) UpdateByNamespaceId(ctx context.Context, namespaceId *dt.ID, update orm.H) (rowsAffected int64, err error) {
	w := orm.NewUpdateWrapper(ModelConfig{})
	w.Eq(TableConfig.NamespaceId, namespaceId)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Updates(update)
	result, err := orm.Update(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}

func (tableConfig) Update(ctx context.Context, update orm.H, where orm.WhereWrapper) (rowsAffected int64, err error) {
	w := orm.NewUpdateWrapper(ModelConfig{})
	w.SetWhere(where).Updates(update)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	result, err := orm.Update(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}

func (tableConfig) DeleteById(ctx context.Context, id *dt.ID) (rowsAffected int64, err error) {
	w := orm.NewDeleteWrapper(ModelConfig{})
	w.Eq(TableConfig.Id, id)
	result, err := orm.Delete(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}

func (tableConfig) DeleteByConfigId(ctx context.Context, configId string) (rowsAffected int64, err error) {
	w := orm.NewDeleteWrapper(ModelConfig{})
	w.Eq(TableConfig.ConfigId, configId)
	result, err := orm.Delete(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}

func (tableConfig) DeleteByCreatorId(ctx context.Context, creatorId *dt.ID) (rowsAffected int64, err error) {
	w := orm.NewDeleteWrapper(ModelConfig{})
	w.Eq(TableConfig.CreatorId, creatorId)
	result, err := orm.Delete(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}

func (tableConfig) DeleteByBaseId(ctx context.Context, baseId *dt.ID) (rowsAffected int64, err error) {
	w := orm.NewDeleteWrapper(ModelConfig{})
	w.Eq(TableConfig.BaseId, baseId)
	result, err := orm.Delete(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}

func (tableConfig) DeleteByNamespaceId(ctx context.Context, namespaceId *dt.ID) (rowsAffected int64, err error) {
	w := orm.NewDeleteWrapper(ModelConfig{})
	w.Eq(TableConfig.NamespaceId, namespaceId)
	result, err := orm.Delete(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}

func (tableConfig) SoftDeleteById(ctx context.Context, id *dt.ID) (rowsAffected int64, err error) {
	w := orm.NewUpdateWrapper(ModelConfig{})
	w.SetValue(TableConfig.DeletedAt, orm.Now())
	w.Eq(TableConfig.Id, id)
	result, err := orm.Update(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}

func (tableConfig) SoftDeleteByConfigId(ctx context.Context, configId string) (rowsAffected int64, err error) {
	w := orm.NewUpdateWrapper(ModelConfig{})
	w.SetValue(TableConfig.DeletedAt, orm.Now())
	w.Eq(TableConfig.ConfigId, configId)
	result, err := orm.Update(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}

func (tableConfig) SoftDeleteByCreatorId(ctx context.Context, creatorId *dt.ID) (rowsAffected int64, err error) {
	w := orm.NewUpdateWrapper(ModelConfig{})
	w.SetValue(TableConfig.DeletedAt, orm.Now())
	w.Eq(TableConfig.CreatorId, creatorId)
	result, err := orm.Update(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}

func (tableConfig) SoftDeleteByBaseId(ctx context.Context, baseId *dt.ID) (rowsAffected int64, err error) {
	w := orm.NewUpdateWrapper(ModelConfig{})
	w.SetValue(TableConfig.DeletedAt, orm.Now())
	w.Eq(TableConfig.BaseId, baseId)
	result, err := orm.Update(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}

func (tableConfig) SoftDeleteByNamespaceId(ctx context.Context, namespaceId *dt.ID) (rowsAffected int64, err error) {
	w := orm.NewUpdateWrapper(ModelConfig{})
	w.SetValue(TableConfig.DeletedAt, orm.Now())
	w.Eq(TableConfig.NamespaceId, namespaceId)
	result, err := orm.Update(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}

func (tableConfig) SoftDelete(ctx context.Context, where orm.WhereWrapper) (rowsAffected int64, err error) {
	w := orm.NewUpdateWrapper(ModelConfig{})
	w.SetValue(TableConfig.DeletedAt, orm.Now())
	w.SetWhere(where)
	result, err := orm.Update(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}

func (tableConfig) Find(ctx context.Context, where orm.WhereWrapper, orderBy ...orm.Order) (list ModelConfigList, err error) {
	w := orm.NewQueryWrapper(ModelConfig{})
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Nested(where)
	w.Order(orderBy...)
	err = orm.Select(ctx, cos.Name, w, &list)
	if err != nil {
		log.Error(err)
		return nil, err
	}
	return
}

func (tableConfig) FindOne(ctx context.Context, where orm.WhereWrapper, orderBy ...orm.Order) (ret ModelConfig, found bool, err error) {
	w := orm.NewQueryWrapper(ModelConfig{})
	w.SetWhere(where).Order(orderBy...)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	err = orm.Select(ctx, cos.Name, w, &ret)
	if err != nil {
		if e, ok := err.(errors.Error); ok && e.Code == errors.SystemError.DatabaseNoData.Code {
			return ret, false, nil
		}
		log.Error(err)
		return ret, false, err
	}
	return ret, true, nil
}

func (tableConfig) FindById(ctx context.Context, id *dt.ID, orderBy ...orm.Order) (list ModelConfigList, err error) {
	w := orm.NewQueryWrapper(ModelConfig{})
	w.Eq(TableConfig.Id, id)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Order(orderBy...)
	err = orm.Select(ctx, cos.Name, w, &list)
	if err != nil {
		log.Error(err)
		return nil, err
	}
	return
}

func (tableConfig) FindByConfigId(ctx context.Context, configId string, orderBy ...orm.Order) (list ModelConfigList, err error) {
	w := orm.NewQueryWrapper(ModelConfig{})
	w.Eq(TableConfig.ConfigId, configId)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Order(orderBy...)
	err = orm.Select(ctx, cos.Name, w, &list)
	if err != nil {
		log.Error(err)
		return nil, err
	}
	return
}

func (tableConfig) FindByCreatorId(ctx context.Context, creatorId *dt.ID, orderBy ...orm.Order) (list ModelConfigList, err error) {
	w := orm.NewQueryWrapper(ModelConfig{})
	w.Eq(TableConfig.CreatorId, creatorId)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Order(orderBy...)
	err = orm.Select(ctx, cos.Name, w, &list)
	if err != nil {
		log.Error(err)
		return nil, err
	}
	return
}

func (tableConfig) FindByBaseId(ctx context.Context, baseId *dt.ID, orderBy ...orm.Order) (list ModelConfigList, err error) {
	w := orm.NewQueryWrapper(ModelConfig{})
	w.Eq(TableConfig.BaseId, baseId)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Order(orderBy...)
	err = orm.Select(ctx, cos.Name, w, &list)
	if err != nil {
		log.Error(err)
		return nil, err
	}
	return
}

func (tableConfig) FindByNamespaceId(ctx context.Context, namespaceId *dt.ID, orderBy ...orm.Order) (list ModelConfigList, err error) {
	w := orm.NewQueryWrapper(ModelConfig{})
	w.Eq(TableConfig.NamespaceId, namespaceId)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Order(orderBy...)
	err = orm.Select(ctx, cos.Name, w, &list)
	if err != nil {
		log.Error(err)
		return nil, err
	}
	return
}

func (tableConfig) Page(ctx context.Context, pageNum, pageSize int64, where orm.WhereWrapper, orderBy ...orm.Order) (list ModelConfigList, err error) {
	w := orm.NewQueryWrapper(ModelConfig{})
	w.SetWhere(where).Offset((pageNum - 1) * pageSize).Limit(pageSize)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Order(orderBy...)
	err = orm.Select(ctx, cos.Name, w, &list)
	if err != nil {
		return nil, err
	}
	return
}

func (tableConfig) PageById(ctx context.Context, pageNum, pageSize int64, id *dt.ID, orderBy ...orm.Order) (list ModelConfigList, err error) {
	w := orm.NewQueryWrapper(ModelConfig{})
	w.Eq(TableConfig.Id, id)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Offset((pageNum - 1) * pageSize).Limit(pageSize).Order(orderBy...)
	err = orm.Select(ctx, cos.Name, w, &list)
	if err != nil {
		log.Error(err)
		return nil, err
	}
	return
}

func (tableConfig) PageByConfigId(ctx context.Context, pageNum, pageSize int64, configId string, orderBy ...orm.Order) (list ModelConfigList, err error) {
	w := orm.NewQueryWrapper(ModelConfig{})
	w.Eq(TableConfig.ConfigId, configId)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Offset((pageNum - 1) * pageSize).Limit(pageSize).Order(orderBy...)
	err = orm.Select(ctx, cos.Name, w, &list)
	if err != nil {
		log.Error(err)
		return nil, err
	}
	return
}

func (tableConfig) PageByCreatorId(ctx context.Context, pageNum, pageSize int64, creatorId *dt.ID, orderBy ...orm.Order) (list ModelConfigList, err error) {
	w := orm.NewQueryWrapper(ModelConfig{})
	w.Eq(TableConfig.CreatorId, creatorId)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Offset((pageNum - 1) * pageSize).Limit(pageSize).Order(orderBy...)
	err = orm.Select(ctx, cos.Name, w, &list)
	if err != nil {
		log.Error(err)
		return nil, err
	}
	return
}

func (tableConfig) PageByBaseId(ctx context.Context, pageNum, pageSize int64, baseId *dt.ID, orderBy ...orm.Order) (list ModelConfigList, err error) {
	w := orm.NewQueryWrapper(ModelConfig{})
	w.Eq(TableConfig.BaseId, baseId)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Offset((pageNum - 1) * pageSize).Limit(pageSize).Order(orderBy...)
	err = orm.Select(ctx, cos.Name, w, &list)
	if err != nil {
		log.Error(err)
		return nil, err
	}
	return
}

func (tableConfig) PageByNamespaceId(ctx context.Context, pageNum, pageSize int64, namespaceId *dt.ID, orderBy ...orm.Order) (list ModelConfigList, err error) {
	w := orm.NewQueryWrapper(ModelConfig{})
	w.Eq(TableConfig.NamespaceId, namespaceId)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Offset((pageNum - 1) * pageSize).Limit(pageSize).Order(orderBy...)
	err = orm.Select(ctx, cos.Name, w, &list)
	if err != nil {
		log.Error(err)
		return nil, err
	}
	return
}

func (tableConfig) Count(ctx context.Context, where orm.WhereWrapper) (count int64, err error) {
	w := orm.NewQueryWrapper(ModelConfig{})
	w.SetWhere(where)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Select("COUNT(*)")
	err = orm.Select(ctx, cos.Name, w, &count)
	if err != nil {
		log.Error(err)
	}
	return count, err
}

func (tableConfig) CountById(ctx context.Context, id *dt.ID) (count int64, err error) {
	w := orm.NewQueryWrapper(ModelConfig{})
	w.Eq(TableConfig.Id, id)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Select("COUNT(*)")
	err = orm.Select(ctx, cos.Name, w, &count)
	if err != nil {
		log.Error(err)
	}
	return count, err
}

func (tableConfig) CountByConfigId(ctx context.Context, configId string) (count int64, err error) {
	w := orm.NewQueryWrapper(ModelConfig{})
	w.Eq(TableConfig.ConfigId, configId)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Select("COUNT(*)")
	err = orm.Select(ctx, cos.Name, w, &count)
	if err != nil {
		log.Error(err)
	}
	return count, err
}

func (tableConfig) CountByCreatorId(ctx context.Context, creatorId *dt.ID) (count int64, err error) {
	w := orm.NewQueryWrapper(ModelConfig{})
	w.Eq(TableConfig.CreatorId, creatorId)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Select("COUNT(*)")
	err = orm.Select(ctx, cos.Name, w, &count)
	if err != nil {
		log.Error(err)
	}
	return count, err
}

func (tableConfig) CountByBaseId(ctx context.Context, baseId *dt.ID) (count int64, err error) {
	w := orm.NewQueryWrapper(ModelConfig{})
	w.Eq(TableConfig.BaseId, baseId)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Select("COUNT(*)")
	err = orm.Select(ctx, cos.Name, w, &count)
	if err != nil {
		log.Error(err)
	}
	return count, err
}

func (tableConfig) CountByNamespaceId(ctx context.Context, namespaceId *dt.ID) (count int64, err error) {
	w := orm.NewQueryWrapper(ModelConfig{})
	w.Eq(TableConfig.NamespaceId, namespaceId)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	w.Select("COUNT(*)")
	err = orm.Select(ctx, cos.Name, w, &count)
	if err != nil {
		log.Error(err)
	}
	return count, err
}

func (tableConfig) Create(ctx context.Context, data ...ModelConfig) (rowsAffected int64, err error) {
	w := orm.NewInsertWrapper(ModelConfig{})
	for _, item := range data {
		w.Add(item)
	}
	result, err := orm.Insert(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}

func (tableConfig) CreateWithLastId(ctx context.Context, data ModelConfig) (lastInsertId *dt.ID, err error) {
	w := orm.NewInsertWrapper(ModelConfig{})
	w.Add(data)
	result, err := orm.Insert(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return dt.InvalidIDPointer(), err
	}
	if id, err := result.LastInsertId(); err != nil {
		return dt.InvalidIDPointer(), err
	} else {
		return dt.NewIDPointer(uint64(id)), nil
	}
}

func (tableConfig) ResetDeletedAt(ctx context.Context, where orm.WhereWrapper) (rowsAffected int64, err error) {
	w := orm.NewUpdateWrapper(ModelConfig{})
	w.SetWhere(where)
	w.SetValue(TableConfig.DeletedAt, 0)
	result, err := orm.Update(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}

func (tableConfig) UpdateAdvance(ctx context.Context, update orm.UpdateWrapper) (rowsAffected int64, err error) {
	w := update
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	result, err := orm.Update(ctx, cos.Name, w)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return result.RowsAffected()
}

func (tableConfig) SumInt64(ctx context.Context, field orm.FieldName, where orm.WhereWrapper) (sum int64, err error) {
	w := orm.NewQueryWrapper(ModelConfig{})
	w.Select("SUM(" + field.Wrap() + ")")
	w.SetWhere(where)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	err = orm.Select(ctx, cos.Name, w, &sum)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return sum, err
}

func (tableConfig) SumFloat64(ctx context.Context, field orm.FieldName, where orm.WhereWrapper) (sum float64, err error) {
	w := orm.NewQueryWrapper(ModelConfig{})
	w.Select("SUM(" + field.Wrap() + ")")
	w.SetWhere(where)
	w.Nested(orm.NewOrWhereWrapper().Eq(TableConfig.DeletedAt, 0).IsNull(TableConfig.DeletedAt))
	err = orm.Select(ctx, cos.Name, w, &sum)
	if err != nil {
		log.Error(err)
		return 0, err
	}
	return sum, err
}
